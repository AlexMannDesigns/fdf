FDF - Notes & Planning


Aim:

Render a 3d wireframe, reading its coords from a plain text file.

This project utilises the graphics library MiniLibX, which provides the tools needed to open a window, create images and handle keyboard and mouse events.


General Instructions:

Project is written in C, following the Norm.
No crashes or mem leaks.
Makefile with $(NAME), all, clean, fclean, re
Any bonuses must be compiled with a 'bonus' makefile rule.
Bonuses must be in a different file with format *_bonus.{c/h}
You can use libft
Submit in school git repo.


Permitted external functions:
- open, close, read, write, malloc, free, perror, strerror, exit
- All functions from math library:
	- -lm compiler option
	- man 3 math
- All functions from MiniLibX


Project specific instructions:
- You must use MiniLibX
- You must turn in a non-relinking makefile
- No global vars

- Program must render an isometric projection.
- Coords are stored in a .fdf plain-text file, passed as a param to the program.
- Horizontal position is the axis, vertical is ordinate and vale is altitude.

- program must display image in a window
- Window mgmt must be smooth (i.e. you can switch windows, minimize, etc)
- Pressing ESC must close the window and quit the program.
- Clicking the cross in the window's frame must quit the program.
- The use of 'images' from MiniLibX is mandatory.


MLX42

- decided to use this library instead of minilibx
- github repo: https://github.com/codam-coding-college/MLX42


DRAWING ISOMETRIC PROJECTIONS

An article: https://clintbellanger.net/articles/isometric_math/

Probably need to add a bit more info to our fdf struct:
	
	- dimensions of the image. i.e. max x and max y (maybe max + min z?)
	Will help us to determine how far apart to draw each point

A bit more reading needed. Let's figure out a mathematical formula to at
least draw each point:

 - first, we need to ascertain dimensions. 
	- How wide is the window in pixels
	- How wide is the image we are drawing in tiles
	- What will be the dimensions of each tile as a result of the above
 		- keeping in mind that isometric projection will result in a wider image
		- projection width will be roughly diagonal width between opposite corners
 - then we need to find the start point.
 	- Can probably just start with the mid-point at top of window assuming each
	  'tile' is square
 - from there, the next point will be somewhere to the right and down
	- This is where the real math comes in.
 - how do we handle a new row of points
	- Detect when we have reached the end of a row
	- Find the start point of the next row
		- somewhere to the left and down from start of previous row

sooo a 3x3 grid would look like this:


                      .
                 .         .
            .         .         .
       .         .         .         .
            .         .         .
                 .         .
                      .           


TODO:

- make a parser for the maps
	- TESTS!
		- consider validation process.
		- build a load of test maps, write a script to run them all.
		- check return value and error message.
		- check argv and option flags are handled properly
			- no args
			- invalid args
		- check file has '.fdf' extention
		- check file can be opened for reading
		- maps must be of equal width.
		- do we need a value range for altitudes?
		- what happens with one value?
		- what happens with no values?
		- what happens with just whitespace?
		- what happens with invalid values?
		- negative value
		- lt int_min gt int_max? 

Line drawing algo has now been implemented.

Now that isometric projection has been implemented, we need to rethink the logic
of the program.
	- fdf_control should be re-factored, the isometric projection math can
	be applied to each point in a far less clunky manner  without having to
	pass a boolean arg.
	- we can also start to flesh out draw set-up and think about adding some
	keyboard controls to move the image around and resize it.

INT16_MAX may be a good limit to impose on the drawn img as this is what MLX42 uses

Looks like the eval includes hexadecimal values - look into converting these.
	- looks like they are delimited by commas and represent colour.

Fresh compile trouble-shooting:
$ brew install glfw
If the compiler fails to link the library.

Install the 42brew if that doesn't work: https://github.com/kube/42homebrew

